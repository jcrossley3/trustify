use crate::Error;
use bytes::Bytes;
use futures_util::{Stream, TryStreamExt};
use reqwest::header;
use serde::{Deserialize, Serialize};
use serde_json::{Value, json};
use std::env;
use utoipa::ToSchema;

const ENV_URL: &str = "EXPLOITIQ_API_URL";
const ENV_TOKEN: &str = "EXPLOITIQ_API_TOKEN";

#[derive(Serialize, Deserialize, Debug, ToSchema)]
pub struct ReportRequest {
    pub vulnerabilities: Vec<String>,
}

#[derive(Serialize, Deserialize, Debug, ToSchema, Default)]
#[serde(rename_all = "camelCase")]
pub struct ReportResult {
    pub id: String,
    pub report_id: String,
}

#[derive(Serialize, Deserialize, Debug)]

pub struct ExploitIqRequest {
    pub vulnerabilities: Vec<String>,
    pub sbom: Value,
    pub sbom_info_type: String,
    pub metadata: Value,
}

impl ExploitIqRequest {
    pub fn new(sbom: Value, vulnerabilities: Vec<String>) -> Self {
        ExploitIqRequest {
            vulnerabilities,
            sbom,
            sbom_info_type: "manual".into(),
            metadata: json!({}),
        }
    }
}

pub async fn create_report(req: ExploitIqRequest) -> Result<ReportResult, Error> {
    let url = format!("{}/reports/new", base_url()?);
    let client = authorized_client()?;
    Ok(client.post(url).json(&req).send().await?.json().await?)
}

pub async fn fetch_report(id: String) -> Result<impl Stream<Item = Result<Bytes, Error>>, Error> {
    let url = format!("{}/reports/{id}", base_url()?);
    let client = authorized_client()?;
    let response = client.get(url).send().await?.error_for_status()?;
    Ok(response.bytes_stream().map_err(Error::Http))
}

fn base_url() -> Result<String, Error> {
    match env::var(ENV_URL) {
        Ok(s) => Ok(s),
        _ => {
            log::error!("ExploitIQ reports require {ENV_URL} to be set");
            Err(Error::Unavailable)
        }
    }
}

fn authorized_client() -> Result<reqwest::Client, Error> {
    let Ok(token) = env::var(ENV_TOKEN) else {
        log::error!("ExploitIQ reports require {ENV_TOKEN} to be set");
        return Err(Error::Unavailable);
    };
    let token = format!("Bearer {token}");
    let mut auth_value = header::HeaderValue::from_str(&token)?;
    auth_value.set_sensitive(true);
    let mut headers = header::HeaderMap::new();
    headers.insert(header::AUTHORIZATION, auth_value);
    Ok(reqwest::Client::builder()
        .default_headers(headers)
        .build()?)
}
